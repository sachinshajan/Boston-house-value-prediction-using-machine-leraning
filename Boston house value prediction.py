# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dRktQmjw5jJcp5bst3usuVGapGzzamT-
"""

#import dependencies
import pandas as pd
import numpy as np
from sklearn import linear_model
from sklearn.model_selection import train_test_split

#import dependencies
import numpy as np
import pandas as pd
from sklearn import linear_model 
from sklearn.model_selection import train_test_split

# load the boston house data from sklearn dataset
from sklearn.datasets import load_boston
boston = load_boston()
print(boston)

#transforming the dataset to data frame
df_x = pd.DataFrame(boston.data,columns = boston.feature_names)
df_y = pd.DataFrame(boston.target)

#describing the output,like,correct formation and allignment such that it is in a table
df_x.describe()

#initialize the model
reg = linear_model.LinearRegression()

#splitting the data
x_train , x_test , y_train , y_test = train_test_split(df_x , df_y , test_size=0.33,random_state=42)

#train the model
reg.fit (x_train , y_train)

#print the co efficients for the feature of our model
print(reg.coef_)

#print the predictions of our test dataset
y_pred = reg.predict(x_test)
print(y_pred)

#print the actual values
print(y_test)

#check the model perfomance / accuracy of the model using MSE
print (np.mean((y_pred - y_test)**2))